<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Rockics]]></title>
  <subtitle><![CDATA[「这是你人生中最伟大的时刻，」泰勒说，「你却心不在焉错过了这一刻。」]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-08-20T00:30:42.815Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Rockics]]></name>
    
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[CentOS 安装配置Nginx+FCGI]]></title>
    <link href="http://yoursite.com/2015/08/19/CentOS-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AENginx-FCGI/"/>
    <id>http://yoursite.com/2015/08/19/CentOS-安装配置Nginx-FCGI/</id>
    <published>2015-08-19T09:23:25.000Z</published>
    <updated>2015-08-19T09:57:30.000Z</updated>
    <content type="html"><![CDATA[<p>参考的文章：<a href="http://chriswu.me/blog/writing-hello-world-in-fcgi-with-c-plus-plus/" target="_blank" rel="external">Writing Hello World in FCGI with C++</a><br>root权限安装spawn-fcgi和libfcgi-dev，这样多用户都可以使用这些基本的库：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum <span class="operator"><span class="keyword">install</span> fcgi-devel</span></div><div class="line">yum <span class="keyword">install</span> spawn-fcgi</div></pre></td></tr></table></figure>

<p>安装很顺利，完成之后，切换到个人用户。编写如下的cpp代码：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> "fcgio.h"</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">void</span>) {</div><div class="line">    streambuf * cin_streambuf  = <span class="built_in">cin</span>.rdbuf();</div><div class="line">    streambuf * cout_streambuf = <span class="built_in">cout</span>.rdbuf();</div><div class="line">    streambuf * cerr_streambuf = <span class="built_in">cerr</span>.rdbuf();</div><div class="line"></div><div class="line">    FCGX_Request request;</div><div class="line"></div><div class="line">    FCGX_Init();</div><div class="line">    FCGX_InitRequest(&request, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (FCGX_Accept_r(&request) == <span class="number">0</span>) {</div><div class="line">        fcgi_streambuf cin_fcgi_streambuf(request.in);</div><div class="line">        fcgi_streambuf cout_fcgi_streambuf(request.out);</div><div class="line">        fcgi_streambuf cerr_fcgi_streambuf(request.err);</div><div class="line"></div><div class="line">        <span class="built_in">cin</span>.rdbuf(&cin_fcgi_streambuf);</div><div class="line">        <span class="built_in">cout</span>.rdbuf(&cout_fcgi_streambuf);</div><div class="line">        <span class="built_in">cerr</span>.rdbuf(&cerr_fcgi_streambuf);</div><div class="line"></div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Content-type: text/html\r\n"</span></div><div class="line">            &lt;&lt; <span class="string">"\r\n"</span></div><div class="line">            &lt;&lt; <span class="string">"&lt;html&gt;\n"</span></div><div class="line">            &lt;&lt; <span class="string">"  &lt;head&gt;\n"</span></div><div class="line">            &lt;&lt; <span class="string">"    &lt;title&gt;Hello, World!&lt;/title&gt;\n"</span></div><div class="line">            &lt;&lt; <span class="string">"  &lt;/head&gt;\n"</span></div><div class="line">            &lt;&lt; <span class="string">"  &lt;body&gt;\n"</span></div><div class="line">            &lt;&lt; <span class="string">"    &lt;h1&gt;Hello, World!&lt;/h1&gt;\n"</span></div><div class="line">            &lt;&lt; <span class="string">"  &lt;/body&gt;\n"</span></div><div class="line">            &lt;&lt; <span class="string">"&lt;/html&gt;\n"</span>;</div><div class="line"></div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="built_in">cin</span>.rdbuf(cin_streambuf);</div><div class="line">    <span class="built_in">cout</span>.rdbuf(cout_streambuf);</div><div class="line">    <span class="built_in">cerr</span>.rdbuf(cerr_streambuf);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>使用命令编译它：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">g</span><span class="literal">+</span><span class="literal">+</span> <span class="comment">main_v1</span><span class="string">.</span><span class="comment">cpp</span> <span class="literal">-</span><span class="comment">lfcgi</span><span class="literal">+</span><span class="literal">+</span> <span class="literal">-</span><span class="comment">lfcgi</span> <span class="literal">-</span><span class="comment">o</span> <span class="comment">hello_world</span></div></pre></td></tr></table></figure>

<p>Nginx的安装之前root账户已经完成，因此这个时候可以省去安装了。<br>在当前目录下，创建一个新的nginx配置文件，内容如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">pid pidpath;(此处请注意替换)</div><div class="line">events {</div><div class="line">    worker_connections <span class="number">1024</span>;</div><div class="line">}</div><div class="line"></div><div class="line">http {</div><div class="line">    server {</div><div class="line">        <span class="keyword">listen</span> <span class="number">8097</span>;</div><div class="line">        server_name localhost;</div><div class="line"></div><div class="line">        location / {</div><div class="line">            fastcgi_pass   <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">8000</span>;</div><div class="line"></div><div class="line">            fastcgi_param  GATEWAY_INTERFACE  CGI/<span class="number">1.1</span>;</div><div class="line">            fastcgi_param  SERVER_SOFTWARE    nginx;</div><div class="line">            fastcgi_param  QUERY_STRING       <span class="variable">$query_string</span>;</div><div class="line">            fastcgi_param  REQUEST_METHOD     <span class="variable">$request_method</span>;</div><div class="line">            fastcgi_param  CONTENT_TYPE       <span class="variable">$content_type</span>;</div><div class="line">            fastcgi_param  CONTENT_LENGTH     <span class="variable">$content_length</span>;</div><div class="line">            fastcgi_param  SCRIPT_FILENAME    <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</div><div class="line">            fastcgi_param  SCRIPT_NAME        <span class="variable">$fastcgi_script_name</span>;</div><div class="line">            fastcgi_param  REQUEST_URI        <span class="variable">$request_uri</span>;</div><div class="line">            fastcgi_param  DOCUMENT_URI       <span class="variable">$document_uri</span>;</div><div class="line">            fastcgi_param  DOCUMENT_ROOT      <span class="variable">$document_root</span>;</div><div class="line">            fastcgi_param  SERVER_PROTOCOL    <span class="variable">$server_protocol</span>;</div><div class="line">            fastcgi_param  REMOTE_ADDR        <span class="variable">$remote_addr</span>;</div><div class="line">            fastcgi_param  REMOTE_PORT        <span class="variable">$remote_port</span>;</div><div class="line">            fastcgi_param  SERVER_ADDR        <span class="variable">$server_addr</span>;</div><div class="line">            fastcgi_param  SERVER_PORT        <span class="variable">$server_port</span>;</div><div class="line">            fastcgi_param  SERVER_NAME        <span class="variable">$server_name</span>;</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>启动nginx和spawn-fcgi</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nginx -<span class="keyword">c</span> /home/aozil/test/nginx_fcgi/nginx.<span class="keyword">conf</span> </div><div class="line">spawn-fcgi -<span class="keyword">p</span> <span class="number">8000</span> -<span class="keyword">n</span> hello_world</div></pre></td></tr></table></figure>

<p>浏览器访问，看看效果<br><a href="http://localhost:8097" target="_blank" rel="external">localhost</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>参考的文章：<a href="http://chriswu.me/blog/writing-hello-world-in-fcgi-with-c-plus-plus/" target="_blank" rel="external">Writing Hello World i]]>
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
      <category term="FCGI" scheme="http://yoursite.com/tags/FCGI/"/>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CNN相关资料]]></title>
    <link href="http://yoursite.com/2015/08/14/CNN%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2015/08/14/CNN学习/</id>
    <published>2015-08-14T09:57:17.000Z</published>
    <updated>2015-08-18T00:51:26.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li><a href="http://cs231n.github.io/neural-networks-1/" target="_blank" rel="external">CS231n Convolutional Neural Networks for Visual Recognition</a></li>
<li><a href="https://github.com/xingdi-eric-yuan/conv-net-version-3" target="_blank" rel="external">conv-net-version-3.1.0</a> 训练了好几天～～</li>
<li><a href="https://github.com/nyanp/tiny-cnn" target="_blank" rel="external">deep learning(convolutional neural networks) in C++11/TBB</a></li>
<li><a href="http://www.cs.toronto.edu/~kriz/cifar.html" target="_blank" rel="external">CIFAR dataset</a></li>
<li><a href="http://deeplearning.stanford.edu/wiki/index.php/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C" target="_blank" rel="external">NG NN基础教程</a></li>
<li><a href="http://cogprints.org/5869/1/cnn_tutorial.pdf" target="_blank" rel="external">Notes on Convolutional Neural Networks</a></li>
<li><a href="http://www.cnblogs.com/bzjia-blog/p/3442788.html" target="_blank" rel="external">中文blog 1</a></li>
<li><a href="http://www.cnblogs.com/charleshuang/p/3651843.html" target="_blank" rel="external">中文blog 2</a></li>
<li><a href="http://blog.csdn.net/zouxy09/article/details/8781543" target="_blank" rel="external">中文bolg 3</a></li>
<li><a href="http://blog.csdn.net/stdcoutzyx/article/details/41596663" target="_blank" rel="external">雨石</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li><a href="http://cs231n.github.io/neural-networks-1/" target="_blank" rel="external">CS231n Convolutional Neural Networks for Visual]]>
    </summary>
    
      <category term="CNN" scheme="http://yoursite.com/tags/CNN/"/>
    
      <category term="ML/DM" scheme="http://yoursite.com/categories/ML-DM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mac/Linux 安装opencv3.0操作备忘]]></title>
    <link href="http://yoursite.com/2015/08/14/Mac-Linux-%E5%AE%89%E8%A3%85opencv3-0%E6%93%8D%E4%BD%9C%E5%A4%87%E5%BF%98/"/>
    <id>http://yoursite.com/2015/08/14/Mac-Linux-安装opencv3-0操作备忘/</id>
    <published>2015-08-14T09:43:21.000Z</published>
    <updated>2015-08-14T09:51:41.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>最近做起了运维的工作呀～～</p>
</blockquote>
<ul>
<li>安装较高版本的cmake</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">tar zxvf cmake-<span class="number">3.3</span>.<span class="number">0</span>.tar.gz</div><div class="line"><span class="keyword">cd</span> cmake-<span class="number">3.3</span>.<span class="number">0</span></div><div class="line">./bootstrap</div><div class="line"><span class="keyword">make</span></div><div class="line"><span class="keyword">make</span> install</div></pre></td></tr></table></figure>

<p>然后安装官方说明安装就行，遇到下载不下来的可以单独下载后在编译～～<br><a href="http://docs.opencv.org/3.0-beta/doc/tutorials/introduction/linux_install/linux_install.html" target="_blank" rel="external">OpenCV install</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>最近做起了运维的工作呀～～</p>
</blockquote>
<ul>
<li>安装较高版本的cmake</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pr]]>
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="OpenCV" scheme="http://yoursite.com/tags/OpenCV/"/>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[升级python操作步骤]]></title>
    <link href="http://yoursite.com/2015/08/14/%E5%8D%87%E7%BA%A7python%E6%93%8D%E4%BD%9C%E6%AD%A5%E9%AA%A4/"/>
    <id>http://yoursite.com/2015/08/14/升级python操作步骤/</id>
    <published>2015-08-14T09:15:44.000Z</published>
    <updated>2015-08-14T09:29:22.000Z</updated>
    <content type="html"><![CDATA[<p>备份旧版本的python</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cp</span> /usr/bin/<span class="keyword">python</span> /root/<span class="keyword">python</span></div></pre></td></tr></table></figure>

<p>安装</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">tar zxvf Python-<span class="number">2.7</span>.<span class="number">1</span>.tgz</div><div class="line">cd Python-<span class="number">2.7</span>.<span class="number">1</span></div><div class="line">.<span class="regexp">/configure --prefix=/</span>usr<span class="regexp">/lib/</span>python2.<span class="number">7</span> --with-threads --enable-shared</div><div class="line">make;make install</div><div class="line">cp <span class="regexp">/usr/</span>lib<span class="regexp">/python2.7/</span>bin<span class="regexp">/python /</span>usr<span class="regexp">/bin/</span>python</div><div class="line">cp <span class="regexp">/usr/</span>lib<span class="regexp">/python2.7/</span>bin<span class="regexp">/python2.7 /</span>usr<span class="regexp">/bin/</span></div><div class="line">cp <span class="regexp">/usr/</span>lib<span class="regexp">/python2.7/</span>lib<span class="regexp">/libpython2.7.so.1.0 /</span>usr<span class="regexp">/lib/</span></div></pre></td></tr></table></figure>

<p>修改文件<code>/etc/ld.so.conf</code>，新增一行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/usr/</span>lib<span class="regexp">/python2.7/</span>lib</div></pre></td></tr></table></figure>

<p>使得配置生效:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">ldconfig</span> -v</div></pre></td></tr></table></figure>

<p>安装完毕后如yum不能使用,则修改yum配置文件<br>vi /usr/lib/yum<br>第一句#!/usr/bin/python 指向原来的python路径，比如我之前用的是Python2.6</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="shebang">#!/usr/bin/python2.6</span></div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>备份旧版本的python</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><]]>
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Install and Using Boost on MacOS]]></title>
    <link href="http://yoursite.com/2015/08/05/Install-and-Using-Boost-on-MacOS/"/>
    <id>http://yoursite.com/2015/08/05/Install-and-Using-Boost-on-MacOS/</id>
    <published>2015-08-05T03:05:27.000Z</published>
    <updated>2015-08-05T03:09:19.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li>Install: 使用强大的brew</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew <span class="operator"><span class="keyword">install</span> boost</span></div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li>Install: 使用强大的brew</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td ]]>
    </summary>
    
      <category term="boost" scheme="http://yoursite.com/tags/boost/"/>
    
      <category term="C++" scheme="http://yoursite.com/categories/C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[linux配置个人工作主目录]]></title>
    <link href="http://yoursite.com/2015/07/28/linux%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E5%B7%A5%E4%BD%9C%E4%B8%BB%E7%9B%AE%E5%BD%95/"/>
    <id>http://yoursite.com/2015/07/28/linux配置个人工作主目录/</id>
    <published>2015-07-28T05:05:58.000Z</published>
    <updated>2015-07-28T05:16:03.000Z</updated>
    <content type="html"><![CDATA[<p>工作中，几位同事都是使用work账户登陆开发机，然后在上面进行开发。默认情况下，各种配置冲突难免。比如，如果很粗暴的使用自己的vim设置覆盖home目录的配置，其他同事就会收到影响，因此，有必要设置的工作环境，特别是工作主目录的设置。<br>做法是：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">mkdir</span> rockics</div><div class="line"><span class="keyword">cd</span> rockics</div><div class="line"><span class="keyword">cp</span> ../.bash_profile .</div></pre></td></tr></table></figure>

<p>然后在bash_profile文件中增加如下的两行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">HOME=<span class="regexp">/home/</span>work/rockics</div><div class="line"><span class="keyword">export</span> HOME</div></pre></td></tr></table></figure>

<p>保存bash_profile，然后执行以下命令使得配置生效：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> .bash_profile</div></pre></td></tr></table></figure>

<p>完成。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>工作中，几位同事都是使用work账户登陆开发机，然后在上面进行开发。默认情况下，各种配置冲突难免。比如，如果很粗暴的使用自己的vim设置覆盖home目录的配置，其他同事就会收到影响，因此，有必要设置的工作环境，特别是工作主目录的设置。<br>做法是：</p>
<figure]]>
    </summary>
    
      <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MySQL使用笔记]]></title>
    <link href="http://yoursite.com/2015/05/19/MySQL%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2015/05/19/MySQL使用笔记/</id>
    <published>2015-05-19T08:07:06.000Z</published>
    <updated>2015-05-19T08:31:21.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li>使用source导入数据库的时候，由于sql文件过大，遇到<code>ERROR 2006 (HY000): MySQL server has gone away</code>的错误，解决的办法是：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">set</span> <span class="keyword">global</span> max_allowed_packet=<span class="number">128</span>*<span class="number">1024</span>*<span class="number">1024</span>;</span></div></pre></td></tr></table></figure>

<p>这行sql将MySQL允许的最大文件修改为128M；</p>
<ul>
<li>将字段修改为auto_increment：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">alter</span>  <span class="keyword">table</span> info <span class="keyword">change</span> id id <span class="built_in">int</span> auto_increment;</span></div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li>使用source导入数据库的时候，由于sql文件过大，遇到<code>ERROR 2006 (HY000): MySQL server has gone away</code>的错误，解决的办法是：</li>
</ul>
<figure class="highl]]>
    </summary>
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
      <category term="LAMP/LNMP" scheme="http://yoursite.com/categories/LAMP-LNMP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python开发点滴]]></title>
    <link href="http://yoursite.com/2015/05/19/Python%E5%BC%80%E5%8F%91%E7%82%B9%E6%BB%B4/"/>
    <id>http://yoursite.com/2015/05/19/Python开发点滴/</id>
    <published>2015-05-19T00:19:35.000Z</published>
    <updated>2015-07-28T05:06:35.000Z</updated>
    <content type="html"><![CDATA[<h4 id="关于yield">关于yield</h4>
<p>参考：<a href="http://www.ibm.com/developerworks/cn/opensource/os-cn-python-yield/" target="_blank" rel="external">Python yield 使用浅析</a><br>首先比较两段代码，都是生成斐波那契数列:</p>
<ul>
<li>普通版本</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fab</span><span class="params">(max)</span>:</span> </div><div class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> n &lt; max: </div><div class="line">        <span class="keyword">print</span> b </div><div class="line">        a, b = b, a + b </div><div class="line">        n = n + <span class="number">1</span></div></pre></td></tr></table></figure>

<p>普通版本直接使用print打印结果，调用者无法获取相关序列</p>
<ul>
<li>使用yield的版本</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fab</span><span class="params">(max)</span>:</span> </div><div class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> n &lt; max: </div><div class="line">        <span class="keyword">yield</span> b </div><div class="line">        a, b = b, a + b </div><div class="line">        n = n + <span class="number">1</span></div></pre></td></tr></table></figure>

<p>简单地讲，yield 的作用就是把一个函数变成一个 generator，带有 yield 的函数不再是一个普通函数，Python 解释器会将其视为一个 generator，调用 fab(5) 不会执行 fab 函数，而是返回一个 iterable 对象！在 for 循环执行时，每次循环都会执行 fab 函数内部的代码，执行到 yield b 时，fab 函数就返回一个迭代值，下次迭代时，代码从 yield b 的下一条语句继续执行，而函数的本地变量看起来和上次中断执行前是完全一样的，于是函数继续执行，直到再次遇到 yield。<br>也可以手动调用 fab(5) 的 next() 方法（因为 fab(5) 是一个 generator 对象，该对象具有 next() 方法），这样我们就可以更清楚地看到 fab 的执行流程</p>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="关于yield">关于yield</h4>
<p>参考：<a href="http://www.ibm.com/developerworks/cn/opensource/os-cn-python-yield/" target="_blank" rel="exter]]>
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Scrapy]]></title>
    <link href="http://yoursite.com/2015/05/18/%E4%BD%BF%E7%94%A8Scrapy-%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2015/05/18/使用Scrapy-安装/</id>
    <published>2015-05-18T00:26:34.000Z</published>
    <updated>2015-05-19T00:18:58.000Z</updated>
    <content type="html"><![CDATA[<h3 id="安装">安装</h3>
<ul>
<li>首先安装pip<br>到一个临时目录执行一下操作：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget http<span class="variable">s:</span>//bootstrap.pypa.io/<span class="built_in">get</span>-pip.<span class="keyword">py</span></div><div class="line">sudo <span class="keyword">python</span> <span class="built_in">get</span>-pip.<span class="keyword">py</span></div></pre></td></tr></table></figure>

<ul>
<li>使用pip安装scrapy</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> pip install scrapy</div></pre></td></tr></table></figure>

<ul>
<li>测试Scrapy安装是否成功</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">scrapy</span> startproject tutorial</div></pre></td></tr></table></figure>

<h3 id="使用：设置user_agent">使用：设置user agent</h3>
<p>可以在文件<code>settings.py</code>中新增UA，更高级的防止ban策略可以考虑UA池子。暂时没有使用到。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="安装">安装</h3>
<ul>
<li>首先安装pip<br>到一个临时目录执行一下操作：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="l]]>
    </summary>
    
      <category term="Scrapy" scheme="http://yoursite.com/tags/Scrapy/"/>
    
      <category term="安装" scheme="http://yoursite.com/tags/%E5%AE%89%E8%A3%85/"/>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android学习笔记一]]></title>
    <link href="http://yoursite.com/2015/05/09/Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
    <id>http://yoursite.com/2015/05/09/Android学习笔记一/</id>
    <published>2015-05-09T10:10:14.000Z</published>
    <updated>2015-05-10T10:22:56.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>业余时间在看郭霖大神的《第一行代码 Android》，做些笔记</p>
</blockquote>
<p>-setContentView():给当前的活动加载一个布局;<br>-所有的活动都要在 AndroidManifest.xml 中进行注册才能生效;<br>-设定主活动:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">intent-filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">action</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.action.MAIN"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">category</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.category.LAUNCHER"</span> /&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="title">intent-filter</span>&gt;</span></div></pre></td></tr></table></figure>

<p>-隐藏标题栏<br>在<code>onCreate()</code>方法中加入如下代码:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">requestWindowFeature</span>(Window<span class="class">.FEATURE_NO_TITLE</span>);</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>业余时间在看郭霖大神的《第一行代码 Android》，做些笔记</p>
</blockquote>
<p>-setContentView():给当前的活动加载一个布局;<br>-所有的活动都要在 AndroidManifest.xml 中进行注册才]]>
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mac下用brew搭建LAMP开发环境]]></title>
    <link href="http://yoursite.com/2015/04/23/Mac%E4%B8%8B%E7%94%A8brew%E6%90%AD%E5%BB%BALAMP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/2015/04/23/Mac下用brew搭建LAMP开发环境/</id>
    <published>2015-04-23T00:13:53.000Z</published>
    <updated>2015-05-19T08:08:29.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>几乎是按照<a href="http://yansu.org/2013/12/11/lamp-in-mac.html" target="_blank" rel="external">Mac下用brew搭建PHP(LNMP/LAMP)开发环境</a>这篇博客操作的，原文写的很详细。这里记录一下我的操作过程。相当于笔记吧。</p>
</blockquote>
<h2 id="Brew">Brew</h2>
<p>brew对于mac，就像apt-get对于ubuntu，安装软件的好帮手，不能方便更多…<br>brew的安装方式如下:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ruby <span class="operator">-e</span> <span class="string">"<span class="variable">$(curl -fsSL https://raw.github.com/mxcl/homebrew/go/install)</span>"</span></div></pre></td></tr></table></figure>

<p>brew常用选项:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">brew <span class="operator"><span class="keyword">install</span> xxx</span></div><div class="line">brew <span class="keyword">uninstall</span> xxx</div><div class="line">brew list </div><div class="line">brew <span class="keyword">update</span> xxx</div></pre></td></tr></table></figure>

<h2 id="Apache">Apache</h2>
<p>Apache的话使用mac自带的基本就够了，我的系统是10.9，可以使用以下命令控制Apache</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> apachectl start</div><div class="line"><span class="built_in">sudo</span> apachectl restart</div><div class="line"><span class="built_in">sudo</span> apachectl stop</div></pre></td></tr></table></figure>

<p>Apache的配置文件是<code>/etc/apache2/httpd.conf</code>，打开它，在末尾新增内容：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword"><span class="common">DocumentRoot</span></span> <span class="string">"/Users/username/Sites"</span></div><div class="line"><span class="tag">&lt;Directory /&gt;</span></div><div class="line">   <span class="keyword"><span class="common">Options</span></span> Indexes MultiViews</div><div class="line">   <span class="keyword">AllowOverride</span> <span class="literal">All</span></div><div class="line">   <span class="keyword"><span class="common">Order</span></span> allow,deny</div><div class="line">   <span class="keyword"><span class="common">Allow</span></span> from <span class="literal">all</span></div><div class="line"><span class="tag">&lt;/Directory&gt;</span></div></pre></td></tr></table></figure>

<p>并且，将以下配置项打开，之前是注释掉的</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LoadModule php5_module libexec/apache2/libphp5.<span class="keyword">so</span></div></pre></td></tr></table></figure>

<p>这样sites目录就是网站根目录了，代码都往这个下头丢。<br>可以通过以下命令查看Apache的错误日志，debug阶段非常有用：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tail <span class="attribute">-f</span> /<span class="keyword">private</span>/<span class="built_in">var</span>/<span class="keyword">log</span>/apache2/error_log</div></pre></td></tr></table></figure>

<h2 id="MySQL">MySQL</h2>
<p>mac不自带mysql，这里需要重新安装，方法依然很简单</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew <span class="operator"><span class="keyword">install</span> mysql</span></div></pre></td></tr></table></figure>

<p>启动命令是:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql.server <span class="operator"><span class="keyword">start</span></span></div></pre></td></tr></table></figure>

<p>最好给mysql设个密码，方法如下:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">mysqladmin</span> -u root password <span class="string">'xxx'</span></div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>几乎是按照<a href="http://yansu.org/2013/12/11/lamp-in-mac.html" target="_blank" rel="external">Mac下用brew搭建PHP(LNMP/LAMP)开发环境</a>]]>
    </summary>
    
      <category term="LAMP" scheme="http://yoursite.com/tags/LAMP/"/>
    
      <category term="LAMP/LNMP" scheme="http://yoursite.com/categories/LAMP-LNMP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[通过AppleScript执行Photoshop Scripting的例子]]></title>
    <link href="http://yoursite.com/2015/02/02/%E9%80%9A%E8%BF%87AppleScript%E6%89%A7%E8%A1%8CPhotoshop-Scripting%E7%9A%84%E4%BE%8B%E5%AD%90/"/>
    <id>http://yoursite.com/2015/02/02/通过AppleScript执行Photoshop-Scripting的例子/</id>
    <published>2015-02-02T15:06:43.000Z</published>
    <updated>2015-02-02T15:16:07.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>很简单的例子</p>
</blockquote>
<ul>
<li>如何启动：osascript scriptname；</li>
<li>例子：</li>
</ul>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">tell</span> <span class="type">application</span> <span class="string">"Adobe Photoshop CC 2014"</span></div><div class="line">    <span class="comment">-- set theFile to alias "Application:Documents:MyFile"</span></div><div class="line">    <span class="comment">-- open theFile</span></div><div class="line">    do javascript (<span class="type">file</span> <span class="string">"filepath"</span>) <span class="keyword">with</span> arguments {<span class="number">75</span>}</div><div class="line"><span class="keyword">end</span> <span class="keyword">tell</span></div></pre></td></tr></table></figure>

<ul>
<li>带参数的例子，好东西</li>
</ul>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function_start"><span class="keyword">on</span></span> <span class="command">run</span> (args)</div><div class="line">    <span class="keyword">set</span> whom <span class="keyword">to</span> <span class="string">"World"</span></div><div class="line">    <span class="keyword">if</span> (<span class="command">count</span> <span class="keyword">of</span> args) &gt; <span class="number">0</span> <span class="keyword">then</span> <span class="keyword">set</span> whom <span class="keyword">to</span> <span class="property">item</span> <span class="number">1</span> <span class="keyword">of</span> args</div><div class="line"></div><div class="line">    <span class="keyword">set</span> greeting <span class="keyword">to</span> <span class="string">"Hello, "</span> & whom & <span class="string">"!"</span></div><div class="line">    <span class="keyword">tell</span> <span class="type">application</span> <span class="string">"Finder"</span></div><div class="line">        <span class="command">display dialog</span> greeting</div><div class="line">    <span class="keyword">end</span> <span class="keyword">tell</span></div><div class="line"><span class="keyword">end</span> <span class="command">run</span></div></pre></td></tr></table></figure>

<ul>
<li>实际的例子</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">osascript</span> testPS.scpt <span class="string">'组 1'</span></div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>很简单的例子</p>
</blockquote>
<ul>
<li>如何启动：osascript scriptname；</li>
<li>例子：</li>
</ul>
<figure class="highlight applescript"><]]>
    </summary>
    
      <category term="Photoshop" scheme="http://yoursite.com/tags/Photoshop/"/>
    
      <category term="Scripting" scheme="http://yoursite.com/tags/Scripting/"/>
    
      <category term="AppleScript" scheme="http://yoursite.com/tags/AppleScript/"/>
    
      <category term="PhotoshopScripting" scheme="http://yoursite.com/categories/PhotoshopScripting/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[将字符串按照指定分隔符分割]]></title>
    <link href="http://yoursite.com/2014/12/06/%E5%B0%86%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8C%89%E7%85%A7%E6%8C%87%E5%AE%9A%E5%88%86%E9%9A%94%E7%AC%A6%E5%88%86%E5%89%B2/"/>
    <id>http://yoursite.com/2014/12/06/将字符串按照指定分隔符分割/</id>
    <published>2014-12-06T01:36:58.000Z</published>
    <updated>2015-04-23T00:15:16.000Z</updated>
    <content type="html"><![CDATA[<h2 id="函数调用方式举例">函数调用方式举例</h2>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">string</span> myStr = <span class="string">"abc_def_ght"</span>;</div><div class="line"><span class="stl_container"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;</span> seg_str = split(myStr, <span class="string">"_"</span>);</div></pre></td></tr></table></figure>

<h2 id="头文件,函数定义">头文件,函数定义</h2>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#ifndef  __SPLIT_H_</span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span>  __SPLIT_H_</span></div><div class="line"><span class="comment">//functions to split a string by a specific delimiter</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;sstream&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string.h&gt;</span></div><div class="line"></div><div class="line"><span class="comment">//thanks to Evan Teran, http://stackoverflow.com/questions/236129/how-to-split-a-string/236803#236803</span></div><div class="line"></div><div class="line"><span class="comment">//split a string on a single delimiter character (delim)</span></div><div class="line">std::<span class="stl_container"><span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;</span>& split(<span class="keyword">const</span> std::<span class="built_in">string</span> &s, <span class="keyword">char</span> delim, std::<span class="stl_container"><span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;</span> &elems);</div><div class="line">std::<span class="stl_container"><span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;</span>  split(<span class="keyword">const</span> std::<span class="built_in">string</span> &s, <span class="keyword">char</span> delim);</div><div class="line"></div><div class="line"><span class="comment">//split a string on any character found in the string of delimiters (delims)</span></div><div class="line">std::<span class="stl_container"><span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;</span>& split(<span class="keyword">const</span> std::<span class="built_in">string</span> &s, <span class="keyword">const</span> std::<span class="built_in">string</span>& delims, std::<span class="stl_container"><span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;</span> &elems);</div><div class="line">std::<span class="stl_container"><span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;</span>  split(<span class="keyword">const</span> std::<span class="built_in">string</span> &s, <span class="keyword">const</span> std::<span class="built_in">string</span>& delims);</div><div class="line"></div><div class="line"><span class="preprocessor">#<span class="keyword">endif</span>  <span class="comment">//__SPLIT_H_</span></span></div></pre></td></tr></table></figure>

<h2 id="C++文件,函数实现">C++文件,函数实现</h2>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> "split.h"</span></div><div class="line"></div><div class="line">std::<span class="stl_container"><span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;</span> &split(<span class="keyword">const</span> std::<span class="built_in">string</span> &s, <span class="keyword">char</span> delim, std::<span class="stl_container"><span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;</span> &elems) {</div><div class="line">    std::<span class="built_in">stringstream</span> ss(s);</div><div class="line">    std::<span class="built_in">string</span> item;</div><div class="line">    <span class="keyword">while</span>(std::getline(ss, item, delim)) {</div><div class="line">        elems.push_back(item);</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> elems;</div><div class="line">}</div><div class="line"></div><div class="line">std::<span class="stl_container"><span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;</span> split(<span class="keyword">const</span> std::<span class="built_in">string</span> &s, <span class="keyword">char</span> delim) {</div><div class="line">    std::<span class="stl_container"><span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;</span> elems;</div><div class="line">    <span class="keyword">return</span> split(s, delim, elems);</div><div class="line">}</div><div class="line"></div><div class="line">std::<span class="stl_container"><span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;</span> &split(<span class="keyword">const</span> std::<span class="built_in">string</span> &s, <span class="keyword">const</span> std::<span class="built_in">string</span>& delims, std::<span class="stl_container"><span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;</span> &elems) {</div><div class="line">    <span class="keyword">char</span>* tok;</div><div class="line">    <span class="keyword">char</span> cchars [s.size()+<span class="number">1</span>];</div><div class="line">    <span class="keyword">char</span>* cstr = &cchars[<span class="number">0</span>];</div><div class="line">    <span class="built_in">strcpy</span>(cstr, s.c_str());</div><div class="line">    tok = strtok(cstr, delims.c_str());</div><div class="line">    <span class="keyword">while</span> (tok != NULL) {</div><div class="line">        elems.push_back(tok);</div><div class="line">        tok = strtok(NULL, delims.c_str());</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> elems;</div><div class="line">}</div><div class="line"></div><div class="line">std::<span class="stl_container"><span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;</span> split(<span class="keyword">const</span> std::<span class="built_in">string</span> &s, <span class="keyword">const</span> std::<span class="built_in">string</span>& delims) {</div><div class="line">    std::<span class="stl_container"><span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;</span> elems;</div><div class="line">    <span class="keyword">return</span> split(s, delims, elems);</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h2 id="函数调用方式举例">函数调用方式举例</h2>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">]]>
    </summary>
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="C++" scheme="http://yoursite.com/categories/C/"/>
    
  </entry>
  
</feed>
